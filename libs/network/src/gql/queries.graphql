mutation RegistUserwithUserself(
  $registWithUserselfInput: RegistWithUserselfInput!
) {
  registUserwithUserself(registWithUserselfInput: $registWithUserselfInput) {
    updatedAt
    uid
    name
    image
    createdAt
  }
}
mutation RegistUserwithProvider(
  $registWithProviderInput: RegistWithProviderInput!
) {
  registUserwithProvider(registWithProviderInput: $registWithProviderInput) {
    updatedAt
    uid
    name
    image
    createdAt
  }
}
query Companies(
  $distinct: [CompanyScalarFieldEnum!]
  $orderBy: [CompanyOrderByWithRelationInput!]
  $where: CompanyWhereInput
  $cursor: CompanyWhereUniqueInput
  $skip: Float
  $take: Float
) {
  companies(
    distinct: $distinct
    orderBy: $orderBy
    where: $where
    cursor: $cursor
    skip: $skip
    take: $take
  ) {
    createdAt
    description
    displayName
    garages {
      id
    }
    id
    managers {
      uid
    }
    updatedAt
  }
}

mutation UserLogin($userLoginInput: LoginInput!) {
  userLogin(userLoginInput: $userLoginInput) {
    token
    user {
      uid
      name
      image
    }
  }
}

query GetAuthProvider($uid: String!) {
  getAuthProvider(uid: $uid) {
    uid
    type
  }
}

query SearchGarages(
  $dateFilter: DateFilterInput!
  $locationFilter: LocationFilterInput!
  $slotsFilter: SlotWhereInput
  $garageFilter: GarageFilter
) {
  searchGarages(
    dateFilter: $dateFilter
    locationFilter: $locationFilter
    slotsFilter: $slotsFilter
    garageFilter: $garageFilter
  ) {
    id
    address {
      lat
      lng
      address
    }
    verification {
      verified
    }
    availableSlots(dateFilter: $dateFilter, slotsFilter: $slotsFilter) {
      pricePerHour
      type
      count
    }
    images
    displayName
  }
}

query MyCompany {
  myCompany {
    id
    garages {
      description
      id
      displayName
      address {
        id
        address
        lat
        lng
      }
    }
    createdAt
    displayName
  }
}

mutation CreateCompany($createCompanyInput: CreateCompanyInput!) {
  createCompany(createCompanyInput: $createCompanyInput) {
    id
  }
}

query Garages(
  $where: GarageWhereInput
  $distinct: [GarageScalarFieldEnum!]
  $orderBy: [GarageOrderByWithRelationInput!]
  $cursor: GarageWhereUniqueInput
  $take: Float
  $skip: Float
) {
  garages(
    where: $where
    distinct: $distinct
    orderBy: $orderBy
    cursor: $cursor
    take: $take
    skip: $skip
  ) {
    id
    displayName
    description
    images
    verification {
      verified
    }
    address {
      id
      lat
      lng
      address
    }
    slotCounts {
      type
      count
    }
  }

  garagesCount(where: $where) {
    count
  }
}

mutation CreateGarage($createGarageInput: CreateGarageInput!) {
  createGarage(createGarageInput: $createGarageInput) {
    id
  }
}

mutation CreateSlots($createSlotInput: CreateSlotInput!, $count: Float!) {
  createSlots(createSlotInput: $createSlotInput, count: $count) {
    count
  }
}
fragment ValetFields on Valet {
  image
  uid
  displayName
}
fragment BookingFields on Booking {
  id
  pricePerHour
  endTime
  startTime
  vehicleNumber
  passcode
  status
  bookingTimeline {
    status
    timestamp
  }
  valetAssignment {
    pickupValet {
      ...ValetFields
    }
    returnValet {
      ...ValetFields
    }
  }
  slot {
    displayName
    garage {
      images
      address {
        address
        lat
        lng
      }
    }
  }
}

query BookingsForGarage(
  $distinct: [BookingScalarFieldEnum!]
  $where: BookingWhereInput
  $orderBy: [BookingOrderByWithRelationInput!]
  $cursor: BookingWhereUniqueInput
  $take: Float
  $skip: Float
) {
  bookingsForGarage(
    distinct: $distinct
    where: $where
    orderBy: $orderBy
    cursor: $cursor
    take: $take
    skip: $skip
  ) {
    ...BookingFields
  }
  bookingsCount(where: $where) {
    count
  }
}
query BookingsForCustomer(
  $distinct: [BookingScalarFieldEnum!]
  $where: BookingWhereInput
  $orderBy: [BookingOrderByWithRelationInput!]
  $cursor: BookingWhereUniqueInput
  $take: Float
  $skip: Float
) {
  bookings(
    distinct: $distinct
    where: $where
    orderBy: $orderBy
    cursor: $cursor
    take: $take
    skip: $skip
  ) {
    ...BookingFields
  }
  bookingsCount(where: $where) {
    count
  }
}

mutation createBookingTimeline(
  $createBookingTimelineInput: CreateBookingTimelineInput!
) {
  createBookingTimeline(
    createBookingTimelineInput: $createBookingTimelineInput
  ) {
    bookingId
    id
    managerId
    status
    timestamp
  }
}

query valetMe {
  valetMe {
    uid
    companyId
  }
}

query adminMe {
  adminMe {
    uid
  }
}

mutation CreateValet($createValetInput: CreateValetInput!) {
  createValet(createValetInput: $createValetInput) {
    uid
  }
}

query CompanyValets(
  $distinct: [ValetScalarFieldEnum!]
  $where: ValetWhereInput
  $orderBy: [ValetOrderByWithRelationInput!]
  $cursor: ValetWhereUniqueInput
  $take: Float
  $skip: Float
) {
  companyValets(
    distinct: $distinct
    where: $where
    orderBy: $orderBy
    cursor: $cursor
    take: $take
    skip: $skip
  ) {
    displayName
    uid
    companyId
    createdAt
    updatedAt
    image
    licenceID
  }
  companyValetsTotal(where: $where)
}

query ValetPickups($take: Float, $skip: Float) {
  valetPickups(take: $take, skip: $skip) {
    id
    vehicleNumber
    startTime
    endTime
    valetAssignment {
      pickupLat
      pickupLng
      returnValetId
    }
    slot {
      garage {
        address {
          lat
          lng
        }
      }
    }
  }
  valetPickupsTotal
}

query ValetDrops($take: Float, $skip: Float, $status: String!) {
  valetDrops(take: $take, skip: $skip, status: $status) {
    id
    vehicleNumber
    startTime
    endTime
    valetAssignment {
      returnLat
      returnLng
      returnValetId
    }
    slot {
      garage {
        address {
          lat
          lng
        }
      }
    }
  }
  valetDropsTotal(status: $status)
}

mutation AssignValet($bookingId: Float!, $status: String!) {
  assignValet(bookingId: $bookingId, status: $status) {
    id
  }
}

query ValetAssignments(
  $distinct: [ValetAssignmentScalarFieldEnum!]
  $where: ValetAssignmentWhereInput
  $orderBy: [ValetAssignmentOrderByWithRelationInput!]
  $cursor: ValetAssignmentWhereUniqueInput
  $take: Float
  $skip: Float
) {
  valetAssignments(
    distinct: $distinct
    where: $where
    orderBy: $orderBy
    cursor: $cursor
    take: $take
    skip: $skip
  ) {
    bookingId
  }
}

fragment ValetBookingFields on Booking {
  id
  vehicleNumber
  passcode
  status
  startTime
  endTime
  slot {
    garage {
      address {
        lat
        lng
      }
    }
  }
}

query PickUpTrip(
  $distinct: [BookingScalarFieldEnum!]
  $where: BookingWhereInput
  $orderBy: [BookingOrderByWithRelationInput!]
  $take: Float
  $skip: Float
) {
  bookingsForValet(
    distinct: $distinct
    where: $where
    orderBy: $orderBy
    take: $take
    skip: $skip
  ) {
    ...ValetBookingFields
    valetAssignment {
      pickupLat
      pickupLng
      pickupValetId
    }
  }
  bookingsCount(where: $where) {
    count
  }
}

query DropUpTrip(
  $distinct: [BookingScalarFieldEnum!]
  $where: BookingWhereInput
  $orderBy: [BookingOrderByWithRelationInput!]
  $take: Float
  $skip: Float
) {
  bookingsForValet(
    distinct: $distinct
    where: $where
    orderBy: $orderBy
    take: $take
    skip: $skip
  ) {
    ...ValetBookingFields
    valetAssignment {
      returnLat
      returnLng
      pickupValetId
    }
  }
  bookingsCount(where: $where) {
    count
  }
}

mutation CreateVerification(
  $createVerificationInput: CreateVerificationInput!
) {
  createVerification(createVerificationInput: $createVerificationInput) {
    adminId
    createdAt
    garageId
    updatedAt
    verified
  }
}

mutation RemoveVerification($where: VerificationWhereUniqueInput!) {
  removeVerification(where: $where) {
    adminId
    createdAt
    garageId
    updatedAt
    verified
  }
}

query Admins(
  $distinct: [AdminScalarFieldEnum!]
  $where: AdminWhereInput
  $orderBy: [AdminOrderByWithRelationInput!]
  $cursor: AdminWhereUniqueInput
  $take: Float
  $skip: Float
) {
  admins(
    distinct: $distinct
    where: $where
    orderBy: $orderBy
    cursor: $cursor
    take: $take
    skip: $skip
  ) {
    user {
      name
    }
    createdAt
    numberOfVerifacation
    uid
    updatedAt
  }
  adminsCount(where: $where)
}

mutation RemoveAdmin($where: AdminWhereUniqueInput!) {
  removeAdmin(where: $where) {
    createdAt
    updatedAt
    uid
    user {
      name
    }
  }
}

mutation CreateAdmin($createAdminInput: CreateAdminInput!) {
  createAdmin(createAdminInput: $createAdminInput) {
    uid
    updatedAt
    createdAt
    user {
      name
    }
  }
}